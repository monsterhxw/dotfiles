# Place a copy of this config to ~/.aerospace.toml
# After that, you can edit ~/.aerospace.toml to your liking

# You can use it to add commands that run after login to macOS user session.
# 'start-at-login' needs to be 'true' for 'after-login-command' to work
# Available commands: https://nikitabobko.github.io/AeroSpace/commands
after-login-command = []

# You can use it to add commands that run after AeroSpace startup.
# 'after-startup-command' is run after 'after-login-command'
# Available commands : https://nikitabobko.github.io/AeroSpace/commands
after-startup-command = []

# Start AeroSpace at login
start-at-login = true

# Normalizations. See: https://nikitabobko.github.io/AeroSpace/guide#normalization
enable-normalization-flatten-containers = true
enable-normalization-opposite-orientation-for-nested-containers = true

# See: https://nikitabobko.github.io/AeroSpace/guide#layouts
# The 'accordion-padding' specifies the size of accordion padding
# You can set 0 to disable the padding feature
accordion-padding = 15

# Possible values: tiles|accordion
default-root-container-layout = 'tiles'

# Possible values: horizontal|vertical|auto
# 'auto' means: wide monitor (anything wider than high) gets horizontal orientation,
#               tall monitor (anything higher than wide) gets vertical orientation
default-root-container-orientation = 'auto'

# Mouse follows focus when focused monitor changes
# Drop it from your config, if you don't like this behavior
# See https://nikitabobko.github.io/AeroSpace/guide#on-focus-changed-callbacks
# See https://nikitabobko.github.io/AeroSpace/commands#move-mouse
# Fallback value (if you omit the key): on-focused-monitor-changed = []
on-focused-monitor-changed = ['move-mouse monitor-lazy-center']
on-focus-changed = ['move-mouse window-lazy-center']

# You can effectively turn off macOS "Hide application" (cmd-h) feature by toggling this flag
# Useful if you don't use this macOS feature, but accidentally hit cmd-h or cmd-alt-h key
# Also see: https://nikitabobko.github.io/AeroSpace/goodies#disable-hide-app
automatically-unhide-macos-hidden-apps = true

# Possible values: (qwerty|dvorak)
# See https://nikitabobko.github.io/AeroSpace/guide#key-mapping
[key-mapping]
preset = 'qwerty'

# Gaps between windows (inner-*) and between monitor edges (outer-*).
# Possible values:
# - Constant:     gaps.outer.top = 8
# - Per monitor:  gaps.outer.top = [{ monitor.main = 16 }, { monitor."some-pattern" = 32 }, 24]
#                 In this example, 24 is a default value when there is no match.
#                 Monitor pattern is the same as for 'workspace-to-monitor-force-assignment'.
#                 See: https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors
[gaps]
inner.horizontal = 5
inner.vertical =   5
outer.left =       8
outer.bottom =     8
outer.top =        8
outer.right =      8

[workspace-to-monitor-force-assignment]
1 = ['built-in', 'secondary']
2 = ['built-in', 'secondary']
3 = ['secondary', 'built-in']
4 = ['secondary', 'built-in']

# 'main' binding mode declaration
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
# 'main' binding mode must be always presented
# Fallback value (if you omit the key): mode.main.binding = {}
[mode.main.binding]

# All possible keys:
# - Letters.        a, b, c, ..., z
# - Numbers.        0, 1, 2, ..., 9
# - Keypad numbers. keypad0, keypad1, keypad2, ..., keypad9
# - F-keys.         f1, f2, ..., f20
# - Special keys.   minus, equal, period, comma, slash, backslash, quote, semicolon, backtick,
#                   leftSquareBracket, rightSquareBracket, space, enter, esc, backspace, tab
# - Keypad special. keypadClear, keypadDecimalMark, keypadDivide, keypadEnter, keypadEqual,
#                   keypadMinus, keypadMultiply, keypadPlus
# - Arrows.         left, down, up, right

# All possible modifiers: cmd, alt, ctrl, shift

# All possible commands: https://nikitabobko.github.io/AeroSpace/commands

# See: https://nikitabobko.github.io/AeroSpace/commands#exec-and-forget
# You can uncomment the following lines to open up terminal with alt + enter shortcut (like in i3)
# alt-enter = '''exec-and-forget osascript -e '
# tell application "Terminal"
#     do script
#     activate
# end tell'
# '''

# See: https://nikitabobko.github.io/AeroSpace/commands#layout
cmd-ctrl-slash = 'layout h_tiles v_tiles'
cmd-ctrl-comma = 'layout v_accordion h_accordion'

# Focus Workspce
cmd-ctrl-f = 'workspace --wrap-around next'
cmd-ctrl-b = 'workspace --wrap-around prev'

# See: https://nikitabobko.github.io/AeroSpace/commands#focus
cmd-ctrl-h = 'focus left --boundaries-action wrap-around-the-workspace'
cmd-ctrl-j = 'focus down --boundaries-action wrap-around-the-workspace'
cmd-ctrl-k = 'focus up --boundaries-action wrap-around-the-workspace'
cmd-ctrl-l = 'focus right --boundaries-action wrap-around-the-workspace'

# See: https://nikitabobko.github.io/AeroSpace/commands#resize
cmd-ctrl-minus = 'resize smart -50'
cmd-ctrl-equal = 'resize smart +100'

# See: https://nikitabobko.github.io/AeroSpace/non-empty-workspaces-root-containers-layout-on-startupcommands#workspace
alt-1 = 'workspace 1'
alt-2 = 'workspace 2'
alt-3 = 'workspace 3'
alt-4 = 'workspace 4'
# alt-5 = 'workspace 5'
# alt-6 = 'workspace 6'
# alt-7 = 'workspace 7'
# alt-8 = 'workspace 8'
# alt-9 = 'workspace 9'
# alt-a = 'workspace A' # In your config, you can drop workspace bindings that you don't need
# alt-b = 'workspace B'
# alt-c = 'workspace C'
# alt-d = 'workspace D'
# alt-e = 'workspace E'
# alt-f = 'workspace F'
# alt-g = 'workspace G'
# alt-i = 'workspace I'
# alt-m = 'workspace M'
# alt-n = 'workspace N'
# alt-o = 'workspace O'
# alt-p = 'workspace P'
# alt-q = 'workspace Q'
# alt-r = 'workspace R'
# alt-s = 'workspace S'
# alt-t = 'workspace T'
# alt-u = 'workspace U'
# alt-v = 'workspace V'
# alt-w = 'workspace W'
# alt-x = 'workspace X'
# alt-y = 'workspace Y'
# alt-z = 'workspace Z'

# See: https://nikitabobko.github.io/AeroSpace/commands#move-node-to-workspace
alt-cmd-1 = 'move-node-to-workspace 1 --focus-follows-window'
alt-cmd-2 = 'move-node-to-workspace 2 --focus-follows-window'
alt-cmd-3 = 'move-node-to-workspace 3 --focus-follows-window'
alt-cmd-4 = 'move-node-to-workspace 4 --focus-follows-window'
# alt-shift-5 = 'move-node-to-workspace 5'
# alt-shift-6 = 'move-node-to-workspace 6'
# alt-shift-7 = 'move-node-to-workspace 7'
# alt-shift-8 = 'move-node-to-workspace 8'
# alt-shift-9 = 'move-node-to-workspace 9'
# alt-shift-a = 'move-node-to-workspace A'
# alt-shift-b = 'move-node-to-workspace B'
# alt-shift-c = 'move-node-to-workspace C'
# alt-shift-d = 'move-node-to-workspace D'
# alt-shift-e = 'move-node-to-workspace E'
# alt-shift-f = 'move-node-to-workspace F'
# alt-shift-g = 'move-node-to-workspace G'
# alt-shift-i = 'move-node-to-workspace I'
# alt-shift-m = 'move-node-to-workspace M'
# alt-shift-n = 'move-node-to-workspace N'
# alt-shift-o = 'move-node-to-workspace O'
# alt-shift-p = 'move-node-to-workspace P'
# alt-shift-q = 'move-node-to-workspace Q'
# alt-shift-r = 'move-node-to-workspace R'
# alt-shift-s = 'move-node-to-workspace S'
# alt-shift-t = 'move-node-to-workspace T'
# alt-shift-u = 'move-node-to-workspace U'
# alt-shift-v = 'move-node-to-workspace V'
# alt-shift-w = 'move-node-to-workspace W'
# alt-shift-x = 'move-node-to-workspace X'
# alt-shift-y = 'move-node-to-workspace Y'
# alt-shift-z = 'move-node-to-workspace Z'

# See: https://nikitabobko.github.io/AeroSpace/commands#workspace-back-and-forth
alt-tab = 'workspace-back-and-forth'
# See: https://nikitabobko.github.io/AeroSpace/commands#move-workspace-to-monitor
alt-shift-tab = 'move-workspace-to-monitor --wrap-around next'

# See: https://nikitabobko.github.io/AeroSpace/commands#mode
cmd-ctrl-semicolon = 'mode service'

# 'service' binding mode declaration.
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
[mode.service.binding]
esc = ['reload-config', 'mode main']
r = ['flatten-workspace-tree', 'mode main'] # reset layout
cmd-f = ['layout floating tiling', 'mode main'] # Toggle between floating and tiling layout
backspace = ['close-all-windows-but-current', 'mode main']

# sticky is not yet supported https://github.com/nikitabobko/AeroSpace/issues/2
#s = ['layout sticky tiling', 'mode main']

# See: https://nikitabobko.github.io/AeroSpace/commands#move
h = ['move left', 'mode main']
j = ['move down', 'mode main']
k = ['move up', 'mode main']
l = ['move right', 'mode main']

shift-h = ['join-with left', 'mode main']
shift-j = ['join-with down', 'mode main']
shift-k = ['join-with up', 'mode main']
shift-l = ['join-with right', 'mode main']

z = ['fullscreen', 'mode main']

# Focus Monitor
f = ['focus-monitor --wrap-around next', 'mode main']
b = ['focus-monitor --wrap-around prev', 'mode main']

# Open Application
alt-g = ['exec-and-forget open -a Ghostty', 'mode main']

down = 'volume down'
up = 'volume up'
shift-down = ['volume set 0', 'mode main']


# On Window Detected
# Finder
[[on-window-detected]]
if.app-id = 'com.apple.finder'
run = ['layout floating']

# App Store
[[on-window-detected]]
if.app-id = 'com.apple.AppStore'
run = ['layout floating']

# Activity Monitor
[[on-window-detected]]
if.app-id = 'com.apple.ActivityMonitor'
run = ['layout floating']

# OrbStack
[[on-window-detected]]
if.app-id = 'dev.kdrag0n.MacVirt'
run = ['layout floating']

# WeChat
[[on-window-detected]]
if.app-id = 'com.tencent.xinWeChat'
run = ['layout floating']

# Wireshark
[[on-window-detected]]
if.app-id = 'org.wireshark.Wireshark'
run = ['layout floating']

# Telegram
[[on-window-detected]]
if.app-id = 'ru.keepcoder.Telegram'
run = ['layout floating']

# Amazon Q
[[on-window-detected]]
if.app-id = 'com.amazon.codewhisperer'
run = ['layout floating']

# Discord
[[on-window-detected]]
if.app-id = 'com.hnc.Discord'
run = ['layout floating']

# Slack
[[on-window-detected]]
if.app-id = 'com.tinyspeck.slackmacgap'
run = ['layout floating']

# Raycast
[[on-window-detected]]
if.app-id = 'com.raycast.macos'
run = ['layout floating']

# Latest
[[on-window-detected]]
if.app-id = 'com.max-langer.Latest'
run = ['layout floating']

# Bob
[[on-window-detected]]
if.app-id = 'com.hezongyidev.Bob'
run = ['layout floating']

# Tencent Lemon
[[on-window-detected]]
if.app-id = 'com.tencent.Lemon'
run = ['layout floating']

# Craft
[[on-window-detected]]
if.app-id = 'com.lukilabs.lukiapp'
run = ['layout floating']

# Figma
[[on-window-detected]]
if.app-id = 'com.figma.Desktop'
run = ['layout floating']

# Keka
[[on-window-detected]]
if.app-id = 'com.aone.keka'
run = ['layout floating']

# Fork
[[on-window-detected]]
if.app-id = 'com.DanPristupov.Fork'
run = ['layout floating']

# OpenCat
[[on-window-detected]]
if.app-id = 'tech.baye.OpenCat'
run = ['layout floating']

# ChatX
[[on-window-detected]]
if.app-id = 'com.app.ChatGPTX'
run = ['layout floating']

# DeepL
[[on-window-detected]]
if.app-id = 'com.linguee.DeepLCopyTranslator'
run = ['layout floating']

# ---Specifies Workspace 1---
# Cubox
[[on-window-detected]]
if.app-id = 'com.linnk.Linnk'
run = ['layout floating', 'move-node-to-workspace 1']

# Mihomo Party
[[on-window-detected]]
if.app-id = 'party.mihomo.app'
run = ['layout floating', 'move-node-to-workspace 1']

# ---Specifies Workspace 2---
# Logseq
[[on-window-detected]]
if.app-id = 'com.electron.logseq'
run = ['layout floating', 'move-node-to-workspace 2']

# Ghostty
[[on-window-detected]]
if.app-id = 'com.mitchellh.ghostty'
run = ['move-node-to-workspace 2']

# Follow
[[on-window-detected]]
if.app-id = 'is.follow'
run = ['layout floating', 'move-node-to-workspace 2']

# ---Specifies Workspace 3---
# Chrome
[[on-window-detected]]
if.app-id = 'com.google.Chrome'
run = ['move-node-to-workspace 3']

# ---Specifies Workspace 4---
# Cherry Stuido
[[on-window-detected]]
if.app-id = 'com.kangfenmao.CherryStudio'
run = ['layout floating', 'move-node-to-workspace 4']
